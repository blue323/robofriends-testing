{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/CounterButton.js","components/Header.js","components/MainPage.js","actions.js","api/api.js","constants.js","containers/App.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","CounterButton","count","nextProps","nextState","color","onClick","Header","MainPage","filterRobots","filter","robot","toLowerCase","includes","searchField","onRequestRobots","onSearchChange","isPending","requestRobots","dispatch","link","fetch","then","response","json","data","payload","catch","App","connect","searchRobots","event","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"2TAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GACzB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,mBACrB,6BACI,4BAAKF,GACL,2BAAIC,MCcLK,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCG9BW,EAdG,SAAC,GAAiC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC9B,OACI,yBAAKX,UAAU,OACX,2BACIY,aAAW,gBACXZ,UAAU,mCACVa,KAAK,SACLC,YAAY,gBACZC,SAAUJ,MCAXK,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACjEJ,EAAMK,WCkBJC,E,kDApBX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTC,UAAU,GAHJ,E,8DAOIC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAGG,KAAKJ,MAAMC,SACH,0DAEAG,KAAKX,MAAMK,a,GAhBFQ,aC2BbC,E,kDA1BX,WAAYd,GAAQ,IAAD,8BACf,cAAMA,IACDO,MAAQ,CACTQ,MAAO,GAHI,E,kEAOGC,EAAWC,GAC7B,OAAGN,KAAKJ,MAAMQ,QAAUE,EAAUF,Q,+BAM5B,IAAD,OACL,OACI,4BACIjC,GAAG,UACHoC,MAAOP,KAAKX,MAAMkB,MAClBC,QAAS,kBAAM,EAAKP,UAAS,SAAAL,GAAK,MAAK,CAACQ,MAAOR,EAAMQ,MAAQ,QAHjE,UAIYJ,KAAKJ,MAAMQ,W,GArBPF,aCgBbO,E,oLAdWJ,EAAWC,GAC7B,OAAO,I,+BAIP,OACA,6BACI,wBAAIlC,UAAU,MAAd,eACA,kBAAC,EAAD,W,GATS8B,aCqCNQ,G,kNAzBXC,aAAe,SAAAnC,GACX,OAAO,EAAKa,MAAMb,OAAOoC,QAAO,SAAAC,GAC5B,OAAOA,EAAM5C,KAAK6C,cAAcC,SAAS,EAAK1B,MAAM2B,YAAYF,mB,kEALpEd,KAAKX,MAAM4B,oB,+BASL,IAAD,EACyCjB,KAAKX,MAA3C6B,EADH,EACGA,eADH,EACmB1C,OAExB,OAHK,EAC2B2C,UAG5B,wBAAI/C,UAAU,MAAd,WAEI,yBAAKA,UAAU,MACX,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAYW,aAAcmC,IAC1B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU1C,OAAQwB,KAAKW,wB,GAtB5BT,cCGVkB,G,MAAgB,kBAAM,SAACC,GCbb,IAACC,EDcpBD,EAAS,CAAEpC,KEZuB,4BDFdqC,EDeZ,6CCdVC,MAAMD,GAAME,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WDe/BF,MAAK,SAAAG,GAAI,OAAIN,EAAS,CAAEpC,KEbK,yBFayB2C,QAASD,OAC/DE,OAAM,SAAA/B,GAAK,OAAIuB,EAAS,CAAEpC,KEbE,wBFa2B2C,QAAS9B,UGQnEgC,E,uKAEE,OAAO,kBAAC,EAAc9B,KAAKX,W,GAFjBa,aAMH6B,eAxBS,SAAAnC,GACpB,MAAO,CACHoB,YAAapB,EAAMoC,aAAahB,YAChCxC,OAAQoB,EAAMwB,cAAc5C,OAC5B2C,UAAWvB,EAAMwB,cAAcD,UAC/BrB,MAAOF,EAAMwB,cAActB,UAIR,SAACuB,GACxB,MAAO,CACHH,eAAgB,SAACe,GAAD,OAAWZ,EHVM,CACrCpC,KET+B,sBFU/B2C,QGQuDK,EAAMC,OAAOC,SAChElB,gBAAiB,kBAAMI,EAASD,SAYzBW,CAA6CD,GCnBtDM,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTnB,MAAK,SAAAwB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBtD,QACfiD,UAAUC,cAAcO,YAI1BC,QAAQC,IACN,iHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,WAO5BnB,OAAM,SAAA/B,GACLwD,QAAQxD,MAAM,4CAA6CA,MCzFjE,IAAM4D,EAAqB,CACvB1C,YAAa,IAYX2C,EAAqB,CACvBxC,WAAW,EACX3C,OAAQ,ICVNoF,G,MAASC,0BAETC,EAAcC,YAAgB,CAAE/B,aDHV,WAA0C,IAAzCpC,EAAwC,uDAAlC8D,EAAoBM,EAAc,uDAAP,GAC1D,OAAOA,EAAO/E,MACV,IHb2B,sBGcvB,OAAOgF,OAAOC,OAAO,GAAItE,EAAO,CAAEoB,YAAagD,EAAOpC,UAC1D,QACI,OAAOhC,ICFiCwB,cDWvB,WAA0C,IAAzCxB,EAAwC,uDAAlC+D,EAAoBK,EAAc,uDAAP,GAC3D,OAAOA,EAAO/E,MACV,IHzB8B,yBG0B1B,OAAOgF,OAAOC,OAAO,GAAItE,EAAO,CAAEuB,WAAW,IACjD,IH1B8B,yBG2B1B,OAAO8C,OAAOC,OAAO,GAAItE,EAAO,CAAEpB,OAAQwF,EAAOpC,QAAST,WAAW,IACzE,IH3B6B,wBG4BzB,OAAO8C,OAAOC,OAAO,GAAItE,EAAO,CAAEE,MAAOkE,EAAOpC,QAAST,WAAW,IACxE,QACI,OAAOvB,MCnBbuE,EAAQC,YAAYN,EAAaO,YAAgBC,IAAiBV,IAGxEW,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,OAEAM,SAASC,eAAe,SFArB,SAAkB9B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI8B,IAAIC,uBAAwBtC,OAAOC,SAASsC,MACpDC,SAAWxC,OAAOC,SAASuC,OAIvC,OAGFxC,OAAOyC,iBAAiB,QAAQ,WAC9B,IAAMpC,EAAK,UAAMiC,uBAAN,sBAEPxC,IAgEV,SAAiCO,EAAOC,GAEtCrB,MAAMoB,EAAO,CACXqC,QAAS,CAAE,iBAAkB,YAE5BxD,MAAK,SAAAC,GAEJ,IAAMwD,EAAcxD,EAASuD,QAAQE,IAAI,gBAEnB,MAApBzD,EAAS0D,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CvC,UAAUC,cAAcuC,MAAM7D,MAAK,SAAAwB,GACjCA,EAAasC,aAAa9D,MAAK,WAC7Bc,OAAOC,SAASgD,eAKpB7C,EAAgBC,EAAOC,MAG1Bf,OAAM,WACLyB,QAAQC,IACN,oEAvFAiC,CAAwB7C,EAAOC,GAI/BC,UAAUC,cAAcuC,MAAM7D,MAAK,WACjC8B,QAAQC,IACN,iHAMJb,EAAgBC,EAAOC,OEtB/BE,K","file":"static/js/main.d629181b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ( {robots} ) => {\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((user, i) => {\r\n                    return (\r\n                        <Card \r\n                            key={i} \r\n                            id={robots[i].id} \r\n                            name={robots[i].name} \r\n                            email={robots[i].email}\r\n                        />\r\n                    );   \r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input\r\n                aria-label='Search Robots' \r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search' \r\n                placeholder='search_robots' \r\n                onChange={searchChange}\r\n                />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflowY: 'scroll', border: '1px solid black', height: '800px' }}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true }) \r\n    };\r\n\r\n    render() {\r\n        if(this.state.hasError) {\r\n            return <h1>Ooops. Something happened!</h1>\r\n        } else {\r\n            return this.props.children\r\n        }\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, {Component} from 'react';\r\n\r\nclass CounterButton extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            count: 0\r\n        };\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if(this.state.count !== nextState.count) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <button\r\n                id='counter'\r\n                color={this.props.color}\r\n                onClick={() => this.setState(state => ({count: state.count + 1}))}>\r\n                Count: {this.state.count}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CounterButton;","import React, {Component} from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component {\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return ( \r\n        <div>\r\n            <h1 className='f1'>RoboFriends</h1>\r\n            <CounterButton />\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport Header from '../components/Header';\r\nimport './MainPage.css';\r\n\r\n\r\n\r\nclass MainPage extends Component {\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    filterRobots = robots => {\r\n        return this.props.robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(this.props.searchField.toLowerCase());\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { onSearchChange, robots, isPending } = this.props;\r\n\r\n        return isPending ?\r\n            <h1 className='tc'>Loading</h1> :\r\n            (\r\n                <div className='tc'>\r\n                    <Header />\r\n                    <SearchBox  searchChange={onSearchChange}/>\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList robots={this.filterRobots()} />\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\nexport default MainPage;","import { apiCall } from './api/api'\r\nimport { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    apiCall('https://jsonplaceholder.typicode.com/users')\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","export const apiCall = (link) =>\r\n  fetch(link).then(response => response.json())","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport MainPage from '../components/MainPage';\r\nimport './App.css';\r\n\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\n\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return <MainPage { ...this.props }/>\r\n        }\r\n    }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField: action.payload });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true })\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false })\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}